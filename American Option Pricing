import numpy as np

def binomial_american(S0,K,T,r,q,sigma,M,opType):
    dt = T/M # time length of steps
    u = np.exp((r-q)*dt + sigma*np.sqrt(dt))
    d = np.exp((r-q)*dt - sigma*np.sqrt(dt))
    p = (np.exp((r-q)*dt)-d)/(u-d)
    mu = np.arange((M+1))
    mu = np.resize(mu,(M+1,M+1)) #sets upper triangular matrix of number of up moves
    md = np.transpose(mu) #sets upper triangular matrix of number of down moves
    mu = u**(mu-md) #sets gross returns of up moves (upper triangular)
    md = d**md #sets gross returns o fdown moves (upper triangular)
    S = S0*mu*md #upper triangular matrix of asset prices (recombining)
    S = np.triu(S, k=0)
    payoff = np.zeros((M+1,M+1), dtype=object)
    arr = np.array([np.maximum(S[:,-1]-K, 0), np.maximum(K-S[:,-1], 0)]).T # terminal payoffs
    arr = list(arr) # convert to list of arrays of terminal call and put payoffs
    payoff[:,-1] = arr
    # Backward Induction
    for j in range(M-1, -1, -1): # loop through each column
        for i in range(0, j+1):
            up = payoff[i, j+1]
            down = payoff[i+1, j+1]
            discounted = np.exp(-r*dt) * ((p*up) + ((1-p)*down))
            St = S[i,j]
            intrinsic = np.array([np.maximum(St-K, 0), np.maximum(K-St, 0)])
            payoff[i,j] = np.maximum(discounted, intrinsic)
    if opType=='call':
        return payoff[0,0][0]
    else:
        return payoff[0,0][1]


S0 = 100
K = 90
T = 1
r = 0.01
q = 0.05
sigma = 0.30
M = 200
opType = 'call'

print('The value of the American '+ opType + ' option is:', binomial_american(S0,K,T,r,q,sigma,M,opType))
